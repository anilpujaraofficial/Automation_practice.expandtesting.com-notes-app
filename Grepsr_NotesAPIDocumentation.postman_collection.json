{
	"info": {
		"_postman_id": "a858226d-c8d1-4107-b4a6-1e814c1458eb",
		"name": "Grepsr_NotesAPIDocumentation",
		"description": "\nWelcome to the Notes API Documentation. \n\nThis API allows you to manage notes and organize them according to different categories. \n\n## Features\n- Create notes with title and content.\n- Categorize notes into different categories.\n- Update and delete notes.\n- Search notes by title or category.\n\nThis API is also utilized as a backend for the [Notes App available here](https://practice.expandtesting.com/notes/app/).\n\n\n\n## API Authorization Guide\n\nTo use this API, you must first have a valid account on the system and know your email and password. Once you have that information:\n\nLog in to the API using the **login endpoint**. This will provide you with an authentication token that you can use to access the protected resources.\n\nKeep the token safe, as you will need it for subsequent requests.\n\nTo authorize your requests, click the \"**Authorize**\" button on the top right corner of the Swagger UI interface. A dialog box will appear asking you to enter the authentication token.\nEnter the token you obtained from the login endpoint and click \"**Authorize**\".\n\nYou are now authorized to use all the protected API endpoints.\n\n\n\nIf you need help using this API, check out our **video guide and demo**, which are available [here](https://www.youtube.com/watch?v=bQYvS6EEBZc?sub_confirmation=1)\n\n## Contact Information\n\nIf you have any questions or feedback, please do not hesitate to contact us via [email](mailto:expand.testing@gmail.com)\n\n\n\n\n\n\nContact Support:\n Email: expand.testing@gmail.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19434234"
	},
	"item": [
		{
			"name": "health-check",
			"item": [
				{
					"name": "Check the health of the API Notes service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Notes API is Running\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/health-check",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health-check"
							]
						},
						"description": "Use this API endpoint to check if the server is running and healthy"
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/health-check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health-check"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/health-check",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health-check"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "register",
					"item": [
						{
							"name": "Creates a new user account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" function genPass(len=12){",
											"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
											"  return Array.from({length: len}, () => chars[Math.floor(Math.random()*chars.length)]).join('');",
											"}",
											"pm.environment.set(\"password\",genPass(8))",
											"",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											" ",
											"",
											"",
											"const jsonData = pm.response.json();",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											" ",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"});",
											"",
											" ",
											"pm.test(\"Correct success message\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"User account created successfully\");",
											"});",
											"",
											" ",
											"pm.test(\"Data object exists\", function () {",
											"    pm.expect(jsonData).to.have.property(\"data\");",
											"});",
											"",
											" ",
											"pm.test(\"Data contains id, name, and email\", function () {",
											"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"name\", \"email\");",
											"    pm.expect(jsonData.data.id).to.be.a(\"string\");",
											"    pm.expect(jsonData.data.name).to.be.a(\"string\");",
											"    pm.expect(jsonData.data.email).to.match(/^\\S+@\\S+\\.\\S+$/);  ",
											"});",
											"",
											"",
											"const schema = {",
											"  \"type\": \"object\",",
											"  \"required\": [\"success\", \"status\", \"message\", \"data\"],",
											"  \"properties\": {",
											"    \"success\": { \"type\": \"boolean\" },",
											"    \"status\": { \"type\": \"integer\" },",
											"    \"message\": { \"type\": \"string\" },",
											"    \"data\": {",
											"      \"type\": \"object\",",
											"      \"required\": [\"id\", \"name\", \"email\"],",
											"      \"properties\": {",
											"        \"id\": { \"type\": \"string\" },",
											"        \"name\": { \"type\": \"string\" },",
											"        \"email\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"email\"",
											"        }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"pm.test(\"Validate response schema\", function () {",
											"  pm.response.to.have.status(201);",
											"  const response = pm.response.json();",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"pm.environment.set('id',jsonData.data.id)",
											"pm.environment.set('name',jsonData.data.name)",
											"pm.environment.set('email', jsonData.data.email)",
											"",
											" ",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{$randomFullName}}",
											"type": "text"
										},
										{
											"key": "email",
											"value": "{{$randomEmail}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"register"
									]
								},
								"description": "Returns the newly created user object"
							},
							"response": [
								{
									"name": "User account created successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User's email address"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User's password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\"\n  }\n}"
								},
								{
									"name": "Bad Request - Invalid input data",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User's email address"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User's password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Log in as an existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// Parse response JSON",
											"var jsonData = pm.response.json();",
											"",
											"const schema = {",
											"  type: \"object\",",
											"  required: [\"success\", \"status\", \"message\", \"data\"],",
											"  properties: {",
											"    success: { type: \"boolean\" },",
											"    status: { type: \"integer\" },",
											"    message: { type: \"string\" },",
											"    data: {",
											"      type: \"object\",",
											"      required: [\"id\", \"name\", \"email\", \"token\"],",
											"      properties: {",
											"        id: { type: \"string\" },",
											"        name: { type: \"string\" },",
											"        email: { type: \"string\", format: \"email\" },",
											"        token: { type: \"string\" }",
											"      }",
											"    }",
											"  }",
											"};",
											"",
											"// Check the response status code is 200",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Check success is true",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"// Check message is \"Login successful\"",
											"pm.test(\"Message is 'Login successful'\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Login successful\");",
											"});",
											"",
											"// Validate data object and its properties",
											"pm.test(\"Data object contains expected keys\", function () {",
											"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"name\", \"email\", \"token\");",
											"});",
											"",
											"// Validate values inside data object",
											"pm.test(\"Data values are correct\", function () {",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(jsonData.data.name).to.eql(pm.environment.get(\"name\"));",
											"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"email\"));",
											"});",
											"",
											"",
											"pm.test(\"Response schema is valid\", function () {",
											"  pm.response.to.have.jsonSchema(schema);",
											"});",
											"pm.environment.set(\"apiKey\",jsonData.data.token)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"description": "(Required) User email"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"description": "(Required) User password"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								},
								"description": "Authenticate a user and return access token"
							},
							"response": [
								{
									"name": "Login successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"email\": \"<string>\",\n    \"name\": \"<string>\",\n    \"token\": \"<string>\"\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												},
												{
													"key": "password",
													"value": "<string>",
													"description": "(Required) User password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"login"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "profile",
					"item": [
						{
							"name": "Retrieve user profile information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response JSON",
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test(\"Message is 'Profile successful'\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Profile successful\");",
											"});",
											"",
											"pm.test(\"Data object contains expected keys\", function () {",
											"    pm.expect(jsonData.data).to.have.all.keys(\"id\", \"name\", \"email\");",
											"});",
											"",
											"pm.test(\"Data values are correct\", function () {",
											"    pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"id\"));",
											"    pm.expect(jsonData.data.name).to.eql(pm.environment.get(\"name\"));",
											"    pm.expect(jsonData.data.email).to.eql(pm.environment.get(\"email\"));",
											"});",
											"",
											"const schema = {",
											"    \"type\": \"object\",",
											"    \"required\": [\"success\", \"status\", \"message\", \"data\"],",
											"    \"properties\": {",
											"        \"success\": { \"type\": \"boolean\", \"const\": true },",
											"        \"status\": { \"type\": \"integer\", \"const\": 200 },",
											"        \"message\": { \"type\": \"string\", \"const\": \"Profile successful\" },",
											"        \"data\": {",
											"            \"type\": \"object\",",
											"            \"required\": [\"id\", \"name\", \"email\"],",
											"            \"properties\": {",
											"                \"id\": { \"type\": \"string\", \"pattern\": \"^[a-f0-9]{24}$\" },",
											"                \"name\": { \"type\": \"string\" },",
											"                \"email\": { \"type\": \"string\", \"format\": \"email\" }",
											"            },",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"additionalProperties\": false",
											"};",
											"",
											" ",
											"pm.test(\"Response schema validation\", () => {",
											"    pm.expect(tv4.validate(jsonData, schema), tv4.error && tv4.error.message).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "x-auth-token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								},
								"description": "Returns the profile information for the logged-in current user."
							},
							"response": [
								{
									"name": "User profile information retrieved successfully",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"company\": \"<string>\"\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update the user profile information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function genPhone() {",
											"  return '9868' + Math.floor(100000 + Math.random() * 900000);",
											"}",
											" pm.environment.set(\"phone\",genPhone())"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.be.true;",
											"});",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"Profile updated successful\");",
											"});",
											"",
											"const schema = {",
											"    type: \"object\",",
											"    required: [\"success\", \"status\", \"message\", \"data\"],",
											"    properties: {",
											"        success: { type: \"boolean\", const: true },",
											"        status: { type: \"integer\", const: 200 },",
											"        message: { type: \"string\", const: \"Profile updated successful\" },",
											"        data: {",
											"            type: \"object\",",
											"            required: [\"id\", \"name\", \"email\", \"phone\", \"company\"],",
											"            properties: {",
											"                id: { type: \"string\", pattern: \"^[a-f0-9]{24}$\" },",
											"                name: { type: \"string\" },",
											"                email: { type: \"string\", format: \"email\" },",
											"                phone: { type: \"string\", pattern: \"^9868\\\\d{6}$\" },",
											"                company: { type: \"string\" }",
											"            },",
											"            additionalProperties: false",
											"        }",
											"    },",
											"    additionalProperties: false",
											"};",
											"",
											"pm.test(\"Response matches JSON schema\", function () {",
											"    pm.expect(tv4.validate(jsonData, schema), tv4.error && tv4.error.message).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "x-auth-token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "{{name}}",
											"description": "(Required) User's name"
										},
										{
											"key": "phone",
											"value": "{{phone}}",
											"description": "User's phone number"
										},
										{
											"key": "company",
											"value": "{{$randomCompanyName}}",
											"description": "User's company name"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"profile"
									]
								},
								"description": "Update the user profile information for the logged-in user"
							},
							"response": [
								{
									"name": "Profile updated successful",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "phone",
													"value": "<string>",
													"description": "User's phone number"
												},
												{
													"key": "company",
													"value": "<string>",
													"description": "User's company name"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"company\": \"<string>\"\n  }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "phone",
													"value": "<string>",
													"description": "User's phone number"
												},
												{
													"key": "company",
													"value": "<string>",
													"description": "User's company name"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized Request",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "phone",
													"value": "<string>",
													"description": "User's phone number"
												},
												{
													"key": "company",
													"value": "<string>",
													"description": "User's company name"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "name",
													"value": "<string>",
													"description": "(Required) User's name"
												},
												{
													"key": "phone",
													"value": "<string>",
													"description": "User's phone number"
												},
												{
													"key": "company",
													"value": "<string>",
													"description": "User's company name"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/profile",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"profile"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "forgot-password",
					"item": [
						{
							"name": "Send password reset link to user's email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse the response",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message contains correct format\", function () {",
											"    const regex = /^Password reset link successfully sent to [\\w.-]+@[\\w.-]+\\.\\w+\\.? Please verify by clicking on the given link$/;",
											"    pm.expect(jsonData.message).to.match(regex);",
											"});",
											"",
											"pm.test(\"Response has all required fields\", function () {",
											"    pm.expect(jsonData).to.have.all.keys(\"success\", \"status\", \"message\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"description": "(Required) User email"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"forgot-password"
									]
								},
								"description": "Sends a password reset link to the user's email address, allowing them to reset their password"
							},
							"response": [
								{
									"name": "Password reset link sent successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"forgot-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"forgot-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "email",
													"value": "<string>",
													"description": "(Required) User email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/forgot-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"forgot-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "verify-reset-password-token",
					"item": [
						{
							"name": "Verify a password reset token",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "x-auth-token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{apiKey}}",
											"description": "(Required) The password reset token received via email"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/verify-reset-password-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"verify-reset-password-token"
									]
								},
								"description": "Verify that the provided password reset token"
							},
							"response": [
								{
									"name": "The provided password reset token is valid",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/verify-reset-password-token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"verify-reset-password-token"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/verify-reset-password-token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"verify-reset-password-token"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/verify-reset-password-token",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"verify-reset-password-token"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "reset-password",
					"item": [
						{
							"name": "Reset a user's password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"export function genPass(len=12){",
											"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
											"  return Array.from({length: len}, () => chars[Math.floor(Math.random()*chars.length)]).join('');",
											"}",
											"pm.environment.set(\"newpassword\",genPass(8))",
											"",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "{{apiKey}}",
											"description": "(Required) The password reset token received via email"
										},
										{
											"key": "newPassword",
											"value": "{{newpassword}}",
											"description": "(Required) The new password for the user's account"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/reset-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"reset-password"
									]
								},
								"description": "Reset a user's password with a valid password reset token and a new password"
							},
							"response": [
								{
									"name": "The password was successfully reset",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password for the user's account"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"reset-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password for the user's account"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"reset-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "token",
													"value": "<string>",
													"description": "(Required) The password reset token received via email"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password for the user's account"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/reset-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"reset-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "change-password",
					"item": [
						{
							"name": "Change a user's password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Parse response body",
											"let jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(jsonData.success).to.eql(true);",
											"});",
											"",
											"pm.test(\"Message is correct\", function () {",
											"    pm.expect(jsonData.message).to.eql(\"The password was successfully updated\");",
											"});",
											"",
											"pm.test(\"Response contains only expected fields\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.members([\"success\", \"status\", \"message\"]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											" function genPass(len=12){",
											"  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";",
											"  return Array.from({length: len}, () => chars[Math.floor(Math.random()*chars.length)]).join('');",
											"}",
											"pm.environment.set(\"newPassword\",genPass(8))",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "x-auth-token",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "currentPassword",
											"value": "{{password}}",
											"description": "(Required) The current password"
										},
										{
											"key": "newPassword",
											"value": "{{newPassword}}",
											"description": "(Required) The new password"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"change-password"
									]
								},
								"description": "Change a user's password by providing the user's current password and the new password."
							},
							"response": [
								{
									"name": "The password was successfully updated",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "currentPassword",
													"value": "<string>",
													"description": "(Required) The current password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"change-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "currentPassword",
													"value": "<string>",
													"description": "(Required) The current password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"change-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal Error Server",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "x-auth-token",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "currentPassword",
													"value": "<string>",
													"description": "(Required) The current password"
												},
												{
													"key": "newPassword",
													"value": "<string>",
													"description": "(Required) The new password"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/users/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"change-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "Get all notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success is true\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Message is correct\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Notes successfully retrieved\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Retrieve a list of notes for the authenticated user"
					},
					"response": [
						{
							"name": "Successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\",\n  \"data\": [\n    {\n      \"id\": \"<string>\",\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"category\": \"<string>\",\n      \"completed\": \"<boolean>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\",\n      \"user_id\": \"<string>\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"category\": \"<string>\",\n      \"completed\": \"<boolean>\",\n      \"created_at\": \"<string>\",\n      \"updated_at\": \"<string>\",\n      \"user_id\": \"<string>\"\n    }\n  ]\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a new note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cat=[\"Home\", \"Work\", \"Personal\"]",
									"",
									"function randomUppercase(length) {",
									"  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"  let result = \"\";",
									"  for (let i = 0; i < length; i++) {",
									"    result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.environment.set(\"title\",randomUppercase(8))",
									"pm.environment.set(\"category\",cat[Math.floor(Math.random() * cat.length)])"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"Note successfully created\");",
									"});",
									"",
									"pm.environment.set(\"noteId\",jsonData.data.id)",
									"pm.environment.set(\"noteTitle\",jsonData.data.title)",
									"pm.environment.set(\"noteDescription\", jsonData.data.description)",
									"pm.environment.set(\"noteCategory\", jsonData.data.category)",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "{{title}}",
									"description": "(Required) Title of the note"
								},
								{
									"key": "description",
									"value": "{{$randomLoremParagraph}}",
									"description": "(Required) Description of the note"
								},
								{
									"key": "category",
									"value": "{{category}}",
									"description": "(Required) Note category"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes"
							]
						},
						"description": "Creates a new note with the given title, description, category and user id."
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Note category"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"completed\": \"<boolean>\",\n    \"created_at\": \"<dateTime>\",\n    \"updated_at\": \"<dateTime>\",\n    \"category\": \"<string>\",\n    \"user_id\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Note category"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Note category"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Note category"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get a note by ID",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) ID of the note to retrieve"
								}
							]
						},
						"description": "Retrieve a note by its ID"
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"completed\": \"<boolean>\",\n    \"created_at\": \"<dateTime>\",\n    \"updated_at\": \"<dateTime>\",\n    \"category\": \"<string>\",\n    \"user_id\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update an existing  note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let cat=[\"Home\", \"Work\", \"Personal\"]",
									"",
									"function randomUppercase(length) {",
									"  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"  let result = \"\";",
									"  for (let i = 0; i < length; i++) {",
									"    result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"  }",
									"  return result;",
									"}",
									"",
									"pm.environment.set(\"title\",randomUppercase(8))",
									"pm.environment.set(\"category\",cat[Math.floor(Math.random() * cat.length)])"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response JSON",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has success = true\", function () {",
									"    pm.expect(responseJson.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Message is 'Note successfully Updated'\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Note successfully Updated\");",
									"});",
									"",
									"pm.test(\"Data object is present\", function () {",
									"    pm.expect(responseJson).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Data object has required fields\", function () {",
									"    const data = responseJson.data;",
									"    ",
									"    pm.expect(data).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(data).to.have.property(\"title\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(data).to.have.property(\"description\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"category\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"completed\").that.is.a(\"boolean\");",
									"    pm.expect(data).to.have.property(\"created_at\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"updated_at\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"user_id\").that.is.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.test(\"Completed is true\", function () {",
									"    pm.expect(responseJson.data.completed).to.be.true;",
									"});",
									"",
									"pm.test(\"Category is 'Home'\", function () {",
									"    pm.expect(responseJson.data.category).to.eql(\"Home\");",
									"});",
									"",
									"pm.test(\"created_at and updated_at are valid ISO date strings\", function () {",
									"    const createdAt = new Date(responseJson.data.created_at);",
									"    const updatedAt = new Date(responseJson.data.updated_at);",
									"    ",
									"    pm.expect(createdAt.toISOString()).to.eql(responseJson.data.created_at);",
									"    pm.expect(updatedAt.toISOString()).to.eql(responseJson.data.updated_at);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "title",
									"value": "{{title}}",
									"description": "(Required) Title of the note"
								},
								{
									"key": "description",
									"value": "{{$randomLoremParagraph}}",
									"description": "(Required) Description of the note"
								},
								{
									"key": "completed",
									"value": "true",
									"description": "(Required) Status of the note (completed or not completed)"
								},
								{
									"key": "category",
									"value": "{{category}}",
									"description": "(Required) Category of the note (\"Home\", \"Work\" or \"Personal\")"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteId}}",
									"description": "(Required) "
								}
							]
						},
						"description": "Creates a new note with the given title, description, category and user id."
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "completed",
											"value": "<boolean>",
											"description": "(Required) Status of the note (completed or not completed)"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Category of the note (\"Home\", \"Work\" or \"Personal\")"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"completed\": \"<boolean>\",\n    \"created_at\": \"<dateTime>\",\n    \"updated_at\": \"<dateTime>\",\n    \"category\": \"<string>\",\n    \"user_id\": \"<string>\"\n  }\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "completed",
											"value": "<boolean>",
											"description": "(Required) Status of the note (completed or not completed)"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Category of the note (\"Home\", \"Work\" or \"Personal\")"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "completed",
											"value": "<boolean>",
											"description": "(Required) Status of the note (completed or not completed)"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Category of the note (\"Home\", \"Work\" or \"Personal\")"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "<string>",
											"description": "(Required) Title of the note"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "(Required) Description of the note"
										},
										{
											"key": "completed",
											"value": "<boolean>",
											"description": "(Required) Status of the note (completed or not completed)"
										},
										{
											"key": "category",
											"value": "Home",
											"description": "(Required) Category of the note (\"Home\", \"Work\" or \"Personal\")"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update the completed status of a note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse response JSON",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has success = true\", function () {",
									"    pm.expect(responseJson.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Message is 'Note successfully Updated'\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Note successfully Updated\");",
									"});",
									"",
									"pm.test(\"Data object is present\", function () {",
									"    pm.expect(responseJson).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Data object has required fields\", function () {",
									"    const data = responseJson.data;",
									"    ",
									"    pm.expect(data).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(data).to.have.property(\"title\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(data).to.have.property(\"description\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"category\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"completed\").that.is.a(\"boolean\");",
									"    pm.expect(data).to.have.property(\"created_at\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"updated_at\").that.is.a(\"string\");",
									"    pm.expect(data).to.have.property(\"user_id\").that.is.a(\"string\").and.not.empty;",
									"});",
									"",
									"pm.test(\"Completed is false\", function () {",
									"    pm.expect(responseJson.data.completed).to.be.false;",
									"});",
									"",
									"",
									"pm.test(\"created_at and updated_at are valid ISO date strings\", function () {",
									"    const createdAt = new Date(responseJson.data.created_at);",
									"    const updatedAt = new Date(responseJson.data.updated_at);",
									"    ",
									"    pm.expect(createdAt.toISOString()).to.eql(responseJson.data.created_at);",
									"    pm.expect(updatedAt.toISOString()).to.eql(responseJson.data.updated_at);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "completed",
									"value": "false",
									"description": "(Required) New value for the `completed` attribute"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/notes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteId}}",
									"description": "(Required) ID of the note to update"
								}
							]
						},
						"description": "Update the `completed` attribute of the note with the specified `id`"
					},
					"response": [
						{
							"name": "Successfully updated the note's completed status",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "completed",
											"value": "<boolean>",
											"description": "(Required) New value for the `completed` attribute"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<number>\",\n  \"message\": \"<string>\",\n  \"data\": {\n    \"id\": \"<string>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"completed\": \"<boolean>\",\n    \"created_at\": \"<string>\",\n    \"updated_at\": \"<string>\",\n    \"category\": \"<string>\",\n    \"user_id\": \"<string>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Delete a note by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response success is true\", function () {",
									"    pm.expect(responseJson.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Message is 'Note successfully deleted'\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Note successfully deleted\");",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.expect(responseJson.status).to.eql(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notes/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{noteId}}",
									"description": "(Required) ID of the note to delete"
								}
							]
						},
						"description": "Deletes a note with the specified ID."
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notes/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notes",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "logout",
			"item": [
				{
					"name": "Log out a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success is true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"User has been successfully logged out\");",
									"});",
									"",
									"pm.test(\"Response has only expected fields\", function () {",
									"    pm.expect(Object.keys(jsonData)).to.have.members([\"success\", \"status\", \"message\"]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "x-auth-token",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						},
						"description": "Log out the currently authenticated user by invalidating their token."
					},
					"response": [
						{
							"name": "Successful Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Unauthorized Request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal Error Server",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "x-auth-token",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": \"<boolean>\",\n  \"status\": \"<integer>\",\n  \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let env = \"qa\"",
					"if (env == 'qa') {",
					"    let api_url = \"https://practice.expandtesting.com/notes/api\"",
					"    pm.environment.set(\"baseUrl\", api_url)",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://practice.expandtesting.com/notes/api"
		}
	]
}